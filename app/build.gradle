/*
 * Copyright (c) 2021 Kevin Phillips, Mission Church of Our Lord Jesus Christ
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

import com.missionchurchcooljc.mcc.buildsrc.AndroidSdk
import com.missionchurchcooljc.mcc.buildsrc.Libs
import com.missionchurchcooljc.mcc.buildsrc.legacy.LegacyJava

plugins {
//    classpath(BuildPlugins.androidApplication)
//    id BuildPlugins.androidApplication
//    id BuildPlugins.kotlinAndroid

    id 'com.android.application'
    id 'kotlin-android'
//        temporarily remove for Github convenience, public allowed to clone and build app
    id 'com.google.gms.google-services'  // Google Services plugin
    id 'androidx.navigation.safeargs.kotlin'
    id 'kotlin-kapt'
    //    switching to dagger
//    id 'dagger.
//    .android.plugin'
}
//apply plugin: 'androidx.navigation.safeargs.kotlin'
//apply plugin: 'com.google.gms.google-services'
//apply plugin: "androidx.navigation.safeargs.kotlin"
//apply plugin: 'androidx.navigation.safeargs'
android {
    compileSdkVersion(AndroidSdk.compile)
    buildToolsVersion "30.0.2"

    defaultConfig {
        applicationId "io.techministry.android.missionchurch"
        minSdkVersion(AndroidSdk.min)
        targetSdkVersion(AndroidSdk.target)
        versionCode 1
        versionName "1.0"

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"

        manifestPlaceholders = [onesignal_app_id : "9cde7f32-fc6b-4849-baaa-a770e9725791",
                                // Project number pulled from dashboard, local value is ignored.
                                onesignal_google_project_number: "REMOTE"]
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
    buildFeatures {
        dataBinding true
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    kotlinOptions {
        jvmTarget = "1.8"

        // Enable Coroutines and Flow APIs
        freeCompilerArgs += "-Xopt-in=kotlinx.coroutines.ExperimentalCoroutinesApi"
//        freeCompilerArgs += "-Xopt-in=kotlinx.coroutines.FlowPreview"
    }
    dynamicFeatures = []
//    packagingOptions {
////        exclude 'META-INF/DEPENDENCIES'
//    }
}

dependencies {
//    implementation('com.getkeepsafe.dexcount:dexcount-gradle-plugin:2.0.0')
//    classpath 'com.getkeepsafe.dexcount:dexcount-gradle-plugin:2.0.0'

    implementation project(':data')
    implementation project(':data-android')
    implementation project(':common')
    implementation project(':feature-highlights')
    implementation project(':legacy-app')

    implementation fileTree(dir: "libs", include: ["*.jar"])
    implementation(Libs.AndroidX.appcompat)
    implementation(Libs.AndroidX.constraintlayout)
    implementation(Libs.AndroidX.Navigation.fragment)
    implementation(Libs.AndroidX.Navigation.ui)

    implementation(Libs.AndroidX.Fragment.fragmentKtx)
    implementation(Libs.AndroidX.Room.runtime)
    implementation 'androidx.legacy:legacy-support-v4:1.0.0'
    kapt(Libs.AndroidX.Room.compiler)
    implementation(Libs.AndroidX.Room.ktx)

    implementation(Libs.AndroidX.Lifecycle.livedata)
    implementation(Libs.AndroidX.Lifecycle.viewmodel)
    implementation(Libs.AndroidX.Lifecycle.savedState)
//    implementation(Libs.AndroidX.Lifecycle.runtime)
    kapt(Libs.AndroidX.Lifecycle.kaptCompiler)

//    commented out dependencies to avoid MultiDex


    androidTestImplementation(Libs.AndroidX.Test.Ext.junit)
    androidTestImplementation(Libs.AndroidX.Test.archCore)
    androidTestImplementation(Libs.AndroidX.Test.espressoCore)

//    implementation(Libs.swiperefresh)
//    implementation(Libs.Google.material)
    implementation(Libs.AndroidX.work)

    //    switching to dagger
//    implementation(Libs.Hilt.library)
//    kapt(Libs.Hilt.compiler)
//    implementation(Libs.Hilt.viewModel.viewModel)
//    kapt(Libs.Hilt.viewModel.kaptCompiler)
//    androidTestImplementation(Libs.Hilt.testing)

    implementation(Libs.Dagger.dagger)
    kapt(Libs.Dagger.compiler)

    implementation(Libs.OkHttp.okhttp)
    implementation(Libs.OkHttp.loggingInterceptor)

    //Glide
    implementation(Libs.Glide.glide)
    kapt(Libs.Glide.glideKapt)
 //---------------------------------
    api(LegacyJava.moshi)
    implementation(LegacyJava.Network.Retrofit.moshi)
    implementation(LegacyJava.Network.Retrofit.rxjava2)


    implementation(LegacyJava.AndroidX.appcompat)
    implementation(LegacyJava.AndroidX.cardview)
    implementation(LegacyJava.AndroidX.recyclerview)
    implementation(LegacyJava.AndroidX.legacysupport)
    implementation(LegacyJava.AndroidX.browser)
    implementation(LegacyJava.AndroidX.constraintlayout)

    implementation(LegacyJava.Google.PlayServices.auth)
    implementation(LegacyJava.Google.PlayServices.maps)
    implementation(LegacyJava.Google.material)



    ///// Network Libraries ///////
    implementation(LegacyJava.Network.Okhttp.okhttp)
    implementation(LegacyJava.Network.Okhttp.interceptor)
    implementation(LegacyJava.Network.Retrofit.retrofit)
    implementation(LegacyJava.Network.Retrofit.gson)
    implementation(LegacyJava.Network.Retrofit.rxjava)
    implementation(LegacyJava.Network.Retrofit.rxjava2)



    ///// Firebase ///////
    implementation(LegacyJava.Google.Firebase.database)
    implementation(LegacyJava.Google.Firebase.firestore)
    implementation(LegacyJava.Google.Firebase.auth)
    implementation(LegacyJava.Google.Firebase.storage)
    implementation(LegacyJava.Google.Firebase.core)


    // FirebaseUI for Firebase Realtime Database
//    implementation 'com.firebaseui:firebase-ui-database:2.4.0'
    implementation(LegacyJava.FirebaseUI.firebaseui)

    implementation(LegacyJava.Network.Fuel.fuel)
    implementation(LegacyJava.Network.Fuel.android)
    implementation(LegacyJava.Onesignal.onesignal)
    implementation(LegacyJava.Network.Setho.setho)
    implementation(LegacyJava.Network.Setho.okhttp)
    implementation(LegacyJava.SDK.twitter)
    implementation(LegacyJava.SDK.facebook)

    ///// Other Libraries ////
    implementation(LegacyJava.Google.gson)
    implementation(LegacyJava.picasso)
    implementation(LegacyJava.circleimageview)
    implementation(LegacyJava.AndroidX.coordinatorlayout)
    implementation(LegacyJava.butterknife)
    implementation(LegacyJava.timeago)
    annotationProcessor(LegacyJava.butterknifeAP)


    ////// Dagger II ////
    implementation(LegacyJava.Google.Dagger.android)
    implementation(LegacyJava.Google.Dagger.support)
    annotationProcessor(LegacyJava.Google.Dagger.processorAP)
    annotationProcessor(LegacyJava.Google.Dagger.compilerAP)


//    Why import this dep if not need w/ min sdk > 26 ?
//    implementation 'androidx.multidex:multidex:2.0.1'
//    annotationProcessor(LegacyJava.multidex)

    implementation(LegacyJava.easyvideoplayer)
    implementation(LegacyJava.jcplayer)
    implementation(LegacyJava.greendao)

    //RXJava
    implementation(LegacyJava.Reactivex.rxandroid)
    implementation(LegacyJava.Reactivex.rxjava)
    implementation(LegacyJava.Reactivex.rxjava2)




//    // workaround from SO --> Duplicate class com.google.common.util.concurrent.ListenableFuture
//    implementation 'com.google.guava:listenablefuture:9999.0-empty-to-avoid-conflict-with-guava'
    implementation(LegacyJava.workaround)

//    Non-Legacy Libs
    implementation(Libs.Glide.glide)
    implementation(Libs.Hilt.library)

    androidTestImplementation(Libs.Test.junit)
    androidTestImplementation(Libs.AndroidX.Test.Ext.junit)
    androidTestImplementation(Libs.AndroidX.Test.espressoCore)

}